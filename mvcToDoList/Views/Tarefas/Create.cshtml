@model TaskList.Models.Tarefas

@{
    ViewBag.Title = "Criar Tarefa";
}

<h2><b>ADICIONAR</b></h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Tarefa</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, "Descrição Tarefa:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input title="Informe a descrição da tarefa" required @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Data, "Defina uma data:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="date" @Html.EditorFor(model => model.Data, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Meta, "Pessoal ou Trabalho?", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Meta, new SelectList(
                  new List<Object>{
                       new { value = "Pessoal" , text = "Pessoal"  },
                       new { value = "Trabalho" , text = "Trabalho" },
                 
                    },
                  "value",
                  "text",
                   1))

                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, " Pendente ou Concluído? ", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
              @Html.DropDownListFor(model => model.Status, new SelectList(
                  new List<Object>{
                       new { value = "PENDENTE" , text = "PENDENTE" },
                       new { value = "CONCLUÍDO" , text = "CONCLUÍDO"  }
                    },
                  "value",
                  "text",
                   2))

                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="SALVAR" class="btn btn-default"/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Voltar", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
